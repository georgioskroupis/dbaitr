name: Deploy to Firebase Hosting

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: ["main"]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      NEXT_TELEMETRY_DISABLED: 1
      CI: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify repo and framework files
        run: |
          pwd
          ls -la
          test -f package.json && node -e "const p=require('./package.json');console.log('next dep:', p.dependencies?.next || p.devDependencies?.next || '(none)')" || (echo 'missing package.json' && exit 1)

      - name: Prepare service account key
        id: sa
        env:
          SA_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          SA_B64: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ runner.temp }}/sa.json
        run: |
          set -euo pipefail
          echo "GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS" >> "$GITHUB_OUTPUT"

          if [ -n "${SA_B64:-}" ]; then
            echo "Using base64-encoded service account."
            echo "$SA_B64" | base64 -d > "$GOOGLE_APPLICATION_CREDENTIALS"
          else
            echo "Using raw JSON service account."
            RAW="$SA_JSON"
            # If wrapped in quotes, strip them.
            if [ "${RAW:0:1}" = '"' ] && [ "${RAW: -1}" = '"' ]; then
              RAW="${RAW:1:${#RAW}-2}"
            fi
            printf '%s' "$RAW" > "$GOOGLE_APPLICATION_CREDENTIALS"
          fi

          # Validate JSON; if it fails, try to fix common newline escape artifacts
          if ! node -e "JSON.parse(require('fs').readFileSync(process.env.GOOGLE_APPLICATION_CREDENTIALS,'utf8'))"; then
            echo "First JSON parse failed; trying to unescape \\r\\n artifacts..."
            node -e "const fs=require('fs');let t=fs.readFileSync(process.env.GOOGLE_APPLICATION_CREDENTIALS,'utf8');t=t.replace(/\\r\\n/g,'\\n').replace(/\\\\n/g,'\n');fs.writeFileSync(process.env.GOOGLE_APPLICATION_CREDENTIALS,t,'utf8');JSON.parse(fs.readFileSync(process.env.GOOGLE_APPLICATION_CREDENTIALS,'utf8'))"
          fi
          echo "Service account JSON OK."

      - name: Deploy via Firebase CLI (frameworks builder)
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.sa.outputs.GOOGLE_APPLICATION_CREDENTIALS }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY || '' }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN || '' }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID || '' }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET || '' }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID || '' }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID || '' }}
          NEXT_PUBLIC_IDV_ONDEVICE: ${{ secrets.NEXT_PUBLIC_IDV_ONDEVICE || 'true' }}
          NEXT_PUBLIC_IDV_AI_APPROVAL: ${{ secrets.NEXT_PUBLIC_IDV_AI_APPROVAL || 'true' }}
          NEXT_PUBLIC_IDV_STRICT_MINIMAL: ${{ secrets.NEXT_PUBLIC_IDV_STRICT_MINIMAL || 'true' }}
          NEXT_PUBLIC_HUMAN_MODELS_URL: ${{ secrets.NEXT_PUBLIC_HUMAN_MODELS_URL || '/vendor/human/models/' }}
          NEXT_PUBLIC_TESSERACT_BASE_URL: ${{ secrets.NEXT_PUBLIC_TESSERACT_BASE_URL || '/vendor/tesseract/' }}
          NEXT_ENABLE_IDV_CSP: ${{ secrets.NEXT_ENABLE_IDV_CSP || 'false' }}
          CLOUD_RUN_IDV_URL: ${{ secrets.CLOUD_RUN_IDV_URL || '' }}
        run: |
          npx --yes firebase-tools@14.14.0 deploy --only hosting --project "$FIREBASE_PROJECT_ID" --debug

      - name: Dump firebase-debug.log on failure
        if: failure()
        run: |
          echo "==== firebase-debug.log (if present) ===="
          test -f firebase-debug.log && tail -n +1 -v firebase-debug.log || echo "firebase-debug.log not found"
          echo "==== tree (top level) ===="
          ls -la
          echo "==== package.json framework hint ===="
          node -e "const p=require('./package.json');console.log(JSON.stringify({name:p.name,next:p.dependencies?.next || p.devDependencies?.next || null},null,2))"
